import cosas.*

describe "test de cosas" {

//para hacer mas sencillo el assert de cada test 
//pero es raro no ver el assert en el test y da alerta Wollok
const cosaPesoYPeligrosidadSon = { unaCosa, unPeso, unaPeligrosidad => assert.that(unaCosa.peso() == unPeso and unaCosa.peligrosidad() == unaPeligrosidad)}

//para incluir assert bloque con solo condicion
const cosaPesoYPeligrosidadBool = {unaCosa, unPeso, unaPeligrosidad => unaCosa.peso() == unPeso and unaCosa.peligrosidad() == unaPeligrosidad}

	test "Knight Rider peso 500, peligrosidad 10" {
	//sabor sin assert pero dispararia advertencia de que no contiene assert aunque da verde.
		cosaPesoYPeligrosidadSon.apply(knightRider, 500, 10)
	//sabor para incluir assert	
		assert.that(cosaPesoYPeligrosidadBool.apply(knightRider, 500, 10))
	}

	test "Bumblebee pesa 800 y su peligrosidad es 15 en modo auto y 30 en robot" {
	//por defecto Bumblebee está en modo robot que es su forma natural
		assert.that(cosaPesoYPeligrosidadBool.apply(bumblebee, 800, 30))
		bumblebee.transformar()
		assert.that(cosaPesoYPeligrosidadBool.apply(bumblebee, 800, 15))
	}

	test "Paquete de ladrillos a 2Kg por Ladrillo, puede variar su cantidad y peligrosidad es 2" {
		//al principio tiene 0 ladrillos, por ende son 0 Kilogramos.
		assert.that(cosaPesoYPeligrosidadBool.apply(paqueteDeLadrillos, 0, 2))
		
		paqueteDeLadrillos.cantidad(1)
		assert.that(cosaPesoYPeligrosidadBool.apply(paqueteDeLadrillos, 2, 2))
		
		paqueteDeLadrillos.cantidad(100)
		assert.that(cosaPesoYPeligrosidadBool.apply(paqueteDeLadrillos, 200, 2))
	}

	test "Arena a granel de peso variable y peligrosidad 1" {
		//al principio pesa 0 Kilogramos.
		assert.that(cosaPesoYPeligrosidadBool.apply(arenaAGranel, 0, 1))
		arenaAGranel.peso(100)
		assert.that(cosaPesoYPeligrosidadBool.apply(arenaAGranel, 100, 1))
	}

	test "La Bateria antiaerea tiene un peso de 300 kilos y con misiles y 200 sin ellos,
  	y su peligrosidad es 100 con misiles y  0 sin ellos" {
		bateriaAntiaerea.cargaMisiles()
		assert.that(cosaPesoYPeligrosidadBool.apply(bateriaAntiaerea, 300, 100))
	
		bateriaAntiaerea.descargaMisiles()
		assert.that(cosaPesoYPeligrosidadBool.apply(bateriaAntiaerea, 200, 0))
	}

	test "Contenedor portuario puede o no tener otras cosas adentro, pesa 100 mas todo lo que contiene y es tan peligroso como su objeto más peligroso, por lo que vacio es 0" {
		//al principio está vacio, por lo que su peso es solo el de el contenedor y su peligrosidad 0
		assert.that(contenedorPortuario.estaVacio())
		assert.that(cosaPesoYPeligrosidadBool.apply(contenedorPortuario, 100, 0))
	
		contenedorPortuario.meter(knightRider)
		assert.that( cosaPesoYPeligrosidadBool.apply(contenedorPortuario, 
													 100 + knightRider.peso(),
													 knightRider.peligrosidad()
													 ) 
		)
				
		contenedorPortuario.meter(bumblebee) //bumblebee es mas peligroso ya que esta en modo Robot, 30
		assert.that(cosaPesoYPeligrosidadBool.apply(contenedorPortuario, 
													100 + knightRider.peso() + bumblebee.peso(), 
													bumblebee.peligrosidad()
													)
		)
	}


	test "Residuos radioactivos tiene peso variable y su peligrosidad es de 200" {
		//al principio hay 0 residuos
		//en el enunciado no dice que si hay cero residuos no hay peligro, pero se sipuno que se carga algo en el camion
		assert.that(cosaPesoYPeligrosidadBool.apply(residuosRadioactivos, 0, 200))

		residuosRadioactivos.peso(100)
		assert.that(cosaPesoYPeligrosidadBool.apply(residuosRadioactivos, 100, 200))
	}

	test "El Embalaje de seguridad envuelve algo, pesa su contenido, y es peligroso al 50% del mismo" {
		//al principio el envoltorio esta vacio
		assert.that(cosaPesoYPeligrosidadBool.apply(embalajeDeSeguridad, 0, 0))
		
		embalajeDeSeguridad.embalar(knightRider)
		assert.that(cosaPesoYPeligrosidadBool.apply(embalajeDeSeguridad, 
													knightRider.peso(), 
													knightRider.peligrosidad() / 2
													)
		)
	}
	
	test "KnightRider, arena a granel y residuos radioactivos son 1 bulto" {
		assert.that([knightRider, arenaAGranel, residuosRadioactivos].all({unaCosa => unaCosa.bultos() == 1})) 
	}
	
	test "Bumblebee y embalaje de seguridad son dos bultos"
	{
		assert.that([bumblebee, embalajeDeSeguridad].all({unaCosa => unaCosa.bultos() == 2}))
	}
	
	test "Paquete de ladrillos es 1 bulto hasta 100 ladrillos, 2 de 101 a 300, 3 301 o mas"
	{
		paqueteDeLadrillos.cantidad(0)
		assert.that(paqueteDeLadrillos.bultos() ==1)
		paqueteDeLadrillos.cantidad(100)
		assert.that(paqueteDeLadrillos.bultos() ==1)
		paqueteDeLadrillos.cantidad(101)
		assert.that(paqueteDeLadrillos.bultos() ==2)
		paqueteDeLadrillos.cantidad(201)
		assert.that(paqueteDeLadrillos.bultos() ==2)
		paqueteDeLadrillos.cantidad(300)
		assert.that(paqueteDeLadrillos.bultos() ==2)
		paqueteDeLadrillos.cantidad(301)
		assert.that(paqueteDeLadrillos.bultos() ==3)
		paqueteDeLadrillos.cantidad(3000)
		assert.that(paqueteDeLadrillos.bultos() ==3)
	}
	
	test "Batería antiaérea: 1 bulto si no tiene misiles, 2 si tiene" 
	{
		bateriaAntiaerea.descargaMisiles()
		assert.that(bateriaAntiaerea.bultos() ==1)
		bateriaAntiaerea.cargaMisiles()
		assert.that(bateriaAntiaerea.bultos() ==2)
	}
	
	test "Contenedor portuario: 1 bulto, mas los bultos que tiene adentro"
	{
		assert.that(contenedorPortuario.bultos() == 1)
		contenedorPortuario.meter(knightRider)
		assert.that(contenedorPortuario.bultos() == 2)
		contenedorPortuario.meter(arenaAGranel)
		assert.that(contenedorPortuario.bultos() == 3)
	}
	
	test "Sufrir cambios de cada cosa surte el efecto buscado (leer comentarios)" {
	//-KnightRider: no hace nada, embalaje de seguridad: nada. Cómo testeo los que no hacen nada? Accedo a cada variable del estado?
		knightRider.sufriCambios()
		assert.that(knightRider.peso() == 500)
		assert.that(knightRider.peligrosidad() == 10)
		assert.that(knightRider.bultos() == 1)
		
		embalajeDeSeguridad.sufriCambios()
		assert.that(vacio.peso() == 0)
		assert.that(vacio.bultos() == 0)
		assert.that(embalajeDeSeguridad.bultos() == 2)
		assert.that(vacio.peligrosidad() == 0)
		
	//- Bumblebee: pasa a robot;
		if (not bumblebee.transformadoEnAuto()) bumblebee.transformar()
		bumblebee.sufriCambios()
		assert.notThat(bumblebee.transformadoEnAuto())

	//- paquete de ladrillos: agrega 12 ladrillos;
		paqueteDeLadrillos.cantidad(0)
		paqueteDeLadrillos.sufriCambios()
		assert.that(paqueteDeLadrillos.cantidad() == 12)
	
	//- arena a granel: agrega 20 kilos;
		arenaAGranel.sufriCambios()
		assert.that(arenaAGranel.peso() == 20)
		
	//- batería antiaérea: carga misiles;
		bateriaAntiaerea.descargaMisiles()
		bateriaAntiaerea.sufriCambios()
		assert.that(bateriaAntiaerea.conMisiles())
	
	//- contenedor portuario: hace que reaccione cada una de las cosas que tiene adentro;
		paqueteDeLadrillos.cantidad(0)
		contenedorPortuario.meter(paqueteDeLadrillos)
	
		if (not bumblebee.transformadoEnAuto()) bumblebee.transformar()
		contenedorPortuario.meter(bumblebee)
	
		contenedorPortuario.sufriCambios()
		assert.that(paqueteDeLadrillos.cantidad() == 12 and not bumblebee.transformadoEnAuto())

	//- residuos radioactivos: agrega 15 kilos;
		residuosRadioactivos.sufriCambios()
		assert.that(residuosRadioactivos.peso() == 15)		
	}
	
}