import camion.*

object cosaPrueba1 {
		var property peso = 0
		var property peligrosidad = 0	
}

object cosaPrueba2 {
		var property peso = 0
		var property peligrosidad = 0	
}
	


describe "camion" {
	const cosa = cosaPrueba1
	const cosa2 = cosaPrueba2
	const ponerACero = {
		unaCosa => unaCosa.peso(0)
					unaCosa.peligrosidad(0)						
}

	fixture {
	ponerACero.apply(cosa)
	ponerACero.apply(cosa2)
	camion.cargar(cosa)	
	}

	test "cargar(cosa)"	{
		assert.that(camion.carga().contains(cosa))
	}
	
	test "descargar(cosa)"	{ 
		camion.descargar(cosa)
		assert.notThat(camion.carga().contains(cosa))
	}
	
	test "pesoTotal()" {
	//es la suma del peso del camión vacío (tara) y su carga. La tara del camión es de 1 tonelada (1000 kilogramos
	assert.that(camion.pesoTotal() == 1000 + cosa.peso())	
	}
	
	test "excedidoDePeso()"  {
		// indica si el peso total es superior al peso máximo. El cual es de 2.5 toneladas;
		assert.notThat(camion.excedidoDePeso()) // deberia dar falso porque solo es el peso del camión que es 1000  
		cosa.peso(1500)						 
		assert.notThat(camion.excedidoDePeso()) // deberia seguir dando falso ya que está en le limite superior	 
		cosa.peso(1500.01)						 
		assert.that(camion.excedidoDePeso()) //deberia está excedido de peso ya que se excede en 1g
		assert.that(camion.pesoTotal() == 1000 + 1500.01)
	}
	
	test "objetosPeligrosos(nivel)" { 
	// todos los objetos cargados que superan el nivel de peligrosidad indicados por el valor del parámetro;
	cosa.peligrosidad(1)
	cosa2.peligrosidad(3)
	camion.cargar(cosa2)
		assert.that(camion.objetosPeligrosos(2) == [cosa2])
	}
	
	test "objetosMasPeligrososQue(cosa)" {
		// todos los objetos cargados que son más peligrosos que la cosa;
		cosa.peligrosidad(1)
		cosa2.peligrosidad(2)
		camion.cargar(cosa2)
		assert.that(camion.objetosMasPeligrososQue(cosa) == [cosa2])
	}
	
	test "puedeCircularEnRuta(nivelMaximoPeligrosidad)" {
		//Puede circular si ninguna cosa que transporta supera el `nivelMaximoPeligrosidad`.
		cosa.peligrosidad(1)
		cosa2.peligrosidad(2)
		camion.cargar(cosa2)
		assert.that(camion.puedeCircularEnRuta(2))
		assert.notThat(camion.puedeCircularEnRuta(1))
	}
	
}